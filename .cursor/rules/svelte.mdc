# Svelte 5 & SvelteKit Rules

## Project Overview

This is a SvelteKit-based SaaS documentation platform using Svelte 5 runes, Shadcn-Svelte UI components, and Paraglide.js internationalization.

## CRITICAL Svelte 5 Migration Rules

**ALWAYS use Svelte 5 syntax, not Svelte 4:**

- ❌ `export let data` → ✅ `let { data } = $props()`
- ❌ `$: reactive` → ✅ `$derived()` or `$effect()`
- ❌ `onMount()` → ✅ `$effect()` (preferred) or `onMount()` (legacy)
- ❌ `on:click` → ✅ `onclick` (preferred) and `onkeydown`, `onsubmit`, etc.
- ❌ `createEventDispatcher()` → ✅ Use callback props instead

**Always use $props() for server data in +page.svelte files**

## Core Technologies

- **SvelteKit 2.x** with Svelte 5 runes
- **Svelte 5** with runes for state management
- **Shadcn-Svelte** for UI components
- **Tailwind CSS** for styling
- **Paraglide.js** for internationalization
- **TypeScript** with strict mode

## Svelte 5 Runes - Essential Usage

```typescript
// State declaration
let count = $state(0);

// Derived values
let doubled = $derived(count * 2);

// Effects (replaces onMount, $:, etc.)
$effect(() => {
	console.log(`Count is now ${count}`);
});

// Props
let { optionalProp = 42, requiredProp } = $props();

// Bindable props
let { bindableProp = $bindable() } = $props();
```

## New Template Syntax

### Event Handlers

```svelte
<!-- Svelte 5: Use onclick, onkeydown, etc. -->
<button onclick={() => count++}>Click me</button>
<input onkeydown={handleKeydown} />
```

### Snippets (replaces slots)

```svelte
<!-- Child component -->
<script>
	let { children, header, footer } = $props();
</script>

{@render header?.()}
{@render children?.()}
{@render footer?.()}

<!-- Parent component -->
<Child>
	{#snippet header()}
		<h1>My Header</h1>
	{/snippet}

	{#snippet children()}
		<p>Main content</p>
	{/snippet}

	{#snippet footer()}
		<footer>My Footer</footer>
	{/snippet}
</Child>
```

### Fragments

```svelte
<!-- Use fragments for multiple root elements -->
{#fragment}
	<div>First element</div>
	<div>Second element</div>
{/fragment}
```

### Key Blocks

```svelte
<!-- Re-render when key changes -->
{#key user.id}
	<UserProfile {user} />
{/key}
```

### Await Blocks

```svelte
<!-- Handle async data -->
{#await fetchUser()}
	<p>Loading...</p>
{:then user}
	<UserProfile {user} />
{:catch error}
	<p>Error: {error.message}</p>
{/await}
```

### Attachments

```svelte
<!-- Element-level lifecycle functions -->
<script>
	function animate(element) {
		// Runs when element is created
		gsap.to(element, { rotation: 360, duration: 2 });
		return () => {
			// Cleanup when element is removed
			gsap.killTweensOf(element);
		};
	}
</script>

<div {@attach animate} class="box"></div>

<!-- Inline attachments -->
<div {@attach (element) => console.log(element)}></div>

<!-- Conditional attachments -->
<div {@attach showAnimation && animate}></div>

<!-- Multiple attachments -->
<div {@attach animate} {@attach drag} class="box"></div>
```

## Project Structure

```
src/
├── lib/
│   ├── components/
│   │   ├── ui/          # Shadcn-Svelte components
│   │   └── modules/     # Reusable module components
│   ├── utils/           # Utility functions
│   └── hooks/           # Custom hooks
├── routes/
│   ├── auth/            # Authentication pages
│   ├── member/          # Member profile pages
│   ├── demo/            # Demo pages
│   └── api/             # API routes
```

## Common Patterns

### Server-side Data Fetching

```typescript
// +page.server.ts
export const load = async ({ locals }) => {
	const { session, user } = await locals.safeGetSession();
	return { session, user };
};
```

### Client-side State Management

```svelte
<script>
	let data = $state(null);

	$effect(() => {
		const fetchData = async () => {
			data = await fetch('/api/data').then((r) => r.json());
		};
		fetchData();
	});
</script>
```

## Internationalization (i18n) with Paraglide.js

```svelte
<script>
	import { m } from '@inlang/paraglide-js';
</script>

<h1>{m('welcome_message')}</h1>
```

## Development Workflow

1. Use `bun dev` for development server
2. Use `bun run check` for type checking
3. Use `bun run lint` for code linting
4. Use `bun run test` for running tests
5. Use `bun run build` for production build

## Documentation

- Svelte 5 Runes: https://svelte.dev/docs/svelte/what-are-runes
- Svelte Documentation: https://svelte.dev/docs
- SvelteKit Documentation: https://kit.svelte.dev/docs
- Paraglide.js Documentation: https://inlang.com/m/gerre34r/library-inlang-paraglideJs/sveltekit

- Paraglide.js Documentation: https://inlang.com/m/gerre34r/library-inlang-paraglideJs/sveltekit

Refer to Svelte, SvelteKit, and Paraglide.js documentation for detailed information on components, internationalization, and best practices.
