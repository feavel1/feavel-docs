# Svelte 5 & SvelteKit Rules

## Project Overview

This is a SvelteKit-based SaaS documentation platform using Svelte 5 runes, Shadcn-Svelte UI components, and Paraglide.js internationalization.

## Core Technologies

- **SvelteKit 2.x** with Svelte 5 runes
- **Svelte 5** with runes for state management
- **Shadcn-Svelte** for UI components
- **Tailwind CSS** for styling
- **Paraglide.js** for internationalization
- **TypeScript** with strict mode

## Svelte 5 Runes Usage

Always use Svelte 5 runes for state management:

```typescript
// State declaration
let count = $state(0);

// Derived values
let doubled = $derived(count * 2);

// Effects
$effect(() => {
	console.log(`Count is now ${count}`);
});

// Props
let { optionalProp = 42, requiredProp } = $props();

// Bindable props
let { bindableProp = $bindable() } = $props();
```

## Runes Edge Cases and Advanced Functionalities

### $derived Edge Cases

#### Complex Derivations with $derived.by

Use `$derived.by` for complex calculations that don't fit in simple expressions:

```typescript
let items = $state([1, 2, 3, 4, 5]);
let filteredSum = $derived.by(() => {
	let sum = 0;
	for (const item of items) {
		if (item > 2) {
			sum += item;
		}
	}
	return sum;
});
```

#### Overriding Derived Values (Optimistic UI)

Derived values can be temporarily overridden for optimistic UI patterns:

```typescript
let { post } = $props();
let likes = $derived(post.likes);

async function handleLike() {
	// Optimistic update
	likes += 1;

	try {
		await likePost(post.id);
	} catch (error) {
		// Rollback on error
		likes -= 1;
	}
}
```

#### Avoiding Dependency Tracking with untrack

Use `untrack()` to prevent state from being treated as a dependency:

```typescript
let data = $state(null);
let timestamp = $state(Date.now());

$effect(() => {
	// Only runs when data changes, not when timestamp changes
	saveToStorage(data, {
		timestamp: untrack(() => timestamp)
	});
});
```

### $effect Edge Cases

#### When NOT to use $effect

Avoid using `$effect` for state synchronization. Use `$derived` instead:

```typescript
// ❌ Don't do this
let count = $state(0);
let doubled = $state(0);

$effect(() => {
	doubled = count * 2;
});

// ✅ Do this instead
let count = $state(0);
let doubled = $derived(count * 2);
```

#### Infinite Loop Prevention

Use `untrack()` to prevent infinite loops when reading and writing to the same state:

```typescript
let value = $state(0);

$effect(() => {
	// Prevent infinite loop
	const currentValue = untrack(() => value);
	if (currentValue < 0) {
		value = 0;
	}
});
```

#### Effect Cleanup

Return cleanup functions from effects:

```typescript
let isVisible = $state(false);

$effect(() => {
	if (isVisible) {
		const interval = setInterval(() => {
			console.log('Component is visible');
		}, 1000);

		// Cleanup function
		return () => clearInterval(interval);
	}
});
```

### $state Edge Cases

#### Deep State Mutations

Objects and arrays are deeply reactive by default:

```typescript
let user = $state({
	name: 'John',
	preferences: {
		theme: 'dark',
		notifications: true
	}
});

// These mutations trigger reactivity
user.preferences.theme = 'light';
user.preferences.notifications = false;
```

#### State in Classes

Use `$state` in class fields for complex state management:

```typescript
class TodoStore {
	todos = $state([]);
	filter = $state('all');

	get filteredTodos() {
		return $derived.by(() => {
			switch (this.filter) {
				case 'active':
					return this.todos.filter((todo) => !todo.completed);
				case 'completed':
					return this.todos.filter((todo) => todo.completed);
				default:
					return this.todos;
			}
		});
	}

	addTodo(text) {
		this.todos.push({ id: Date.now(), text, completed: false });
	}
}
```

### Performance Optimization Edge Cases

#### Conditional Dependencies

Use conditional logic carefully in derived values:

```typescript
let showDetails = $state(false);
let user = $state(null);

// Only depends on user when showDetails is true
let displayName = $derived.by(() => {
	if (!showDetails) return 'Hidden';
	return user?.name || 'Anonymous';
});
```

#### Memoization with $derived

Use derived values for expensive calculations:

```typescript
let items = $state([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);

let expensiveCalculation = $derived.by(() => {
	// This expensive calculation only runs when items changes
	return items.reduce((acc, item) => {
		// Simulate expensive operation
		for (let i = 0; i < 1000000; i++) {
			acc += Math.sqrt(item);
		}
		return acc;
	}, 0);
});
```

#### Effect Dependencies Optimization

Use `$effect.tracking()` to optimize effect dependencies:

```typescript
let user = $state(null);
let settings = $state({ theme: 'light' });

$effect(() => {
	// Only track user changes, ignore settings changes
	const currentUser = $effect.tracking(() => user);

	if (currentUser) {
		console.log(`User ${currentUser.name} logged in`);
	}
});
```

### Props and Bindings Edge Cases

#### Bindable Props with Validation

Use bindable props with validation:

```typescript
let { count = $bindable(0), max = $bindable(100) } = $props();

// Validate bindable props
$effect(() => {
	if (count > max) {
		count = max;
	}
	if (count < 0) {
		count = 0;
	}
});
```

#### Computed Props

Use derived values for computed props:

```typescript
let { items = [] } = $props();

let totalItems = $derived(items.length);
let hasItems = $derived(items.length > 0);
let firstItem = $derived(items[0]);
```

### Error Handling Edge Cases

#### Effect Error Boundaries

Handle errors in effects gracefully:

```typescript
let data = $state(null);

$effect(() => {
	try {
		if (data) {
			// Potentially dangerous operation
			processData(data);
		}
	} catch (error) {
		console.error('Error processing data:', error);
		// Handle error gracefully
		data = null;
	}
});
```

#### Async Operations in Effects

Handle async operations properly:

```typescript
let userId = $state(null);

$effect(() => {
	if (userId) {
		// Handle async operation
		fetchUserData(userId)
			.then((data) => {
				// Update state with fetched data
			})
			.catch((error) => {
				console.error('Failed to fetch user data:', error);
			});
	}
});
```

## Project Structure

```
src/
├── lib/
│   ├── components/
│   │   ├── ui/          # Shadcn-Svelte components
│   │   └── modules/     # Reusable module components
│   ├── utils/           # Utility functions
│   └── hooks/           # Custom hooks
├── routes/
│   ├── auth/            # Authentication pages
│   ├── member/          # Member profile pages
│   ├── demo/            # Demo pages
│   └── api/             # API routes
├── app.html             # HTML template
├── app.css              # Global styles
├── app.d.ts             # TypeScript declarations
├── hooks.server.ts      # Server-side hooks
└── hooks.ts             # Client-side hooks
```

## Code Style and Structure

- Write concise, technical TypeScript code with accurate Svelte 5 examples
- Use functional and declarative programming patterns
- Avoid unnecessary classes except for state machines
- Prefer iteration and modularization over code duplication
- Structure files: component logic, markup, styles, helpers, types

## Naming Conventions

- Use lowercase with hyphens for component files (e.g., `auth-form.svelte`)
- Use PascalCase for component names in imports and usage
- Use camelCase for variables, functions, and props
- Use kebab-case for route files and directories

## TypeScript Usage

- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects instead
- Use functional components with TypeScript interfaces for props
- Enable strict mode in TypeScript for better type safety

## UI and Styling with Shadcn-Svelte

- Use Tailwind CSS for utility-first styling approach
- Leverage Shadcn-Svelte components for pre-built, customizable UI elements
- Import Shadcn-Svelte components from `$lib/components/ui`
- Organize Tailwind classes using the `cn()` utility from `$lib/utils`

### Available UI Components

- **Layout**: Accordion, Card, Drawer, Dialog, Popover
- **Navigation**: Breadcrumb, Navigation Menu, Command, Menubar
- **Forms**: Form, Input, Label, Radio Group, Input OTP
- **Data Display**: Table, Data Table, Badge, Avatar, Progress
- **Feedback**: Alert Dialog, Context Menu, Dropdown Menu, Hover Card
- **Pagination**: Pagination components

### Color System

Use Shadcn color conventions:

```css
--background, --foreground: Default body colors
--muted, --muted-foreground: Muted backgrounds
--card, --card-foreground: Card backgrounds
--popover, --popover-foreground: Popover backgrounds
--border: Default border color
--input: Input border color
--primary, --primary-foreground: Primary button colors
--secondary, --secondary-foreground: Secondary button colors
--accent, --accent-foreground: Accent colors
--destructive, --destructive-foreground: Destructive action colors
--ring: Focus ring color
--radius: Border radius for components
```

## Component Development

- Create .svelte files for Svelte components
- Use .svelte.ts files for component logic and state machines
- Implement proper component composition and reusability
- Use Svelte's props for data passing
- Leverage Svelte's reactive declarations for local state management

## State Management

Use classes for complex state management (state machines):

```typescript
// counter.svelte.ts
class Counter {
	count = $state(0);
	incrementor = $state(1);

	increment() {
		this.count += this.incrementor;
	}

	resetCount() {
		this.count = 0;
	}

	resetIncrementor() {
		this.incrementor = 1;
	}
}

export const counter = new Counter();
```

Use in components:

```svelte
<script lang="ts">
	import { counter } from './counter.svelte.ts';
</script>

<button onclick={() => counter.increment()}>
	Count: {counter.count}
</button>
```

## Routing and Pages

- Utilize SvelteKit's file-based routing system in the src/routes/ directory
- Implement dynamic routes using [slug] syntax
- Use load functions for server-side data fetching and pre-rendering
- Implement proper error handling with +error.svelte pages

## Server-Side Rendering (SSR) and Static Site Generation (SSG)

- Leverage SvelteKit's SSR capabilities for dynamic content
- Implement SSG for static pages using prerender option
- Use the adapter-auto for automatic deployment configuration

## Performance Optimization

- Leverage Svelte's compile-time optimizations
- Use `{#key}` blocks to force re-rendering of components when needed
- Implement code splitting using dynamic imports for large applications
- Profile and monitor performance using browser developer tools
- Use `$effect.tracking()` to optimize effect dependencies
- Minimize use of client-side JavaScript; leverage SvelteKit's SSR and SSG
- Implement proper lazy loading for images and other assets

## Data Fetching and API Routes

- Use load functions for server-side data fetching
- Implement proper error handling for data fetching operations
- Create API routes in the src/routes/api/ directory
- Implement proper request handling and response formatting in API routes
- Use SvelteKit's hooks for global API middleware

## SEO and Meta Tags

- Use Svelte:head component for adding meta information
- Implement canonical URLs for proper SEO
- Create reusable SEO components for consistent meta tag management

## Forms and Actions

- Utilize SvelteKit's form actions for server-side form handling
- Use `sveltekit-superforms` for form validation
- Implement Zod schemas for type safety
- Use progressive enhancement for JavaScript-optional form submissions

## Internationalization (i18n) with Paraglide.js

- Use Paraglide.js for internationalization
- Use the `m()` function for all user-facing strings
- Language files are in `messages/` directory
- Supported languages: English (en), Chinese (cn), Russian (ru)

```svelte
<script>
	import { m } from '@inlang/paraglide-js';
</script>

<h1>{m('welcome_message')}</h1>
```

## Common Patterns

### Server-side Data Fetching

```typescript
// +page.server.ts
export const load = async ({ locals }) => {
	const { session, user } = await locals.safeGetSession();
	return { session, user };
};
```

### Client-side State Management

```typescript
// +page.svelte
<script>
  let data = $state(null);

  $effect(() => {
    const fetchData = async () => {
      // Fetch data logic here
      data = result;
    };
    fetchData();
  });
</script>
```

## Accessibility

- Ensure proper semantic HTML structure in Svelte components
- Implement ARIA attributes where necessary
- Ensure keyboard navigation support for interactive elements
- Use Svelte's bind:this for managing focus programmatically
- Follow WCAG 2.1 guidelines

## Testing

- Unit tests with Vitest
- E2E tests with Playwright
- Component testing with Vitest Browser
- Test files: `*.test.ts`, `*.spec.ts`

## Development Workflow

1. Use `bun dev` for development server
2. Use `bun run check` for type checking
3. Use `bun run lint` for code linting
4. Use `bun run test` for running tests
5. Use `bun run build` for production build

## Documentation

- Svelte 5 Runes: https://svelte.dev/docs/svelte/what-are-runes
- Svelte Documentation: https://svelte.dev/docs
- SvelteKit Documentation: https://kit.svelte.dev/docs
- Paraglide.js Documentation: https://inlang.com/m/gerre34r/library-inlang-paraglideJs/sveltekit

Refer to Svelte, SvelteKit, and Paraglide.js documentation for detailed information on components, internationalization, and best practices.
