# Feavel Docs Project Rules

## Project Overview

Feavel Docs is a SaaS documentation platform built with SvelteKit, Supabase, and Shadcn-Svelte. The platform allows users to create, manage, and share documentation with features for verified users to offer services.

## Core Features

1. **Authentication**: User signup, login, and session management
2. **User Profiles**: Member profiles with customizable settings
3. **Blog System**: Create and manage documentation posts
4. **Services**: Verified users can offer services
5. **Orders**: Users can place orders for services
6. **Internationalization**: Multi-language support (EN, CN, RU)

## Project Structure Guidelines

### Routes Organization

```
src/routes/
├── +layout.svelte          # Main layout
├── +page.svelte            # Home page
├── auth/                   # Authentication
│   ├── login/
│   ├── signup/
│   └── error/
├── member/                 # Member area
│   └── [slug]/            # User profiles
│       └── settings/      # User settings
├── demo/                   # Demo pages
│   └── paraglide/         # i18n demo
└── api/                    # API routes
```

### Component Organization

```
src/lib/components/
├── ui/                     # Shadcn-Svelte components
├── modules/                # Reusable module components
│   ├── auth/              # Authentication components
│   ├── blog/              # Blog-related components
│   ├── services/          # Service components
│   └── orders/            # Order components
└── layout/                # Layout components
```

## Authentication Patterns

### Protected Routes

```typescript
// +layout.server.ts
export const load = async ({ locals }) => {
	const { session, user } = await locals.safeGetSession();

	if (!session) {
		throw redirect(303, '/auth/login');
	}

	return { session, user };
};
```

### Role-Based Access

```typescript
// Check for verified user status
export const load = async ({ locals }) => {
	const { session, user } = await locals.safeGetSession();

	if (!user?.user_metadata?.verified) {
		throw redirect(303, '/member/apply-verification');
	}

	return { session, user };
};
```

## Database Schema Patterns

### User Profiles

```sql
-- profiles table
CREATE TABLE profiles (
  id UUID REFERENCES auth.users(id) PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  full_name TEXT,
  avatar_url TEXT,
  bio TEXT,
  is_verified BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### Blog Posts

```sql
-- posts table
CREATE TABLE posts (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  author_id UUID REFERENCES profiles(id) NOT NULL,
  title TEXT NOT NULL,
  slug TEXT UNIQUE NOT NULL,
  content TEXT,
  excerpt TEXT,
  published BOOLEAN DEFAULT FALSE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### Services

```sql
-- services table
CREATE TABLE services (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  provider_id UUID REFERENCES profiles(id) NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  price DECIMAL(10,2),
  category TEXT,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### Orders

```sql
-- orders table
CREATE TABLE orders (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  customer_id UUID REFERENCES profiles(id) NOT NULL,
  service_id UUID REFERENCES services(id) NOT NULL,
  status TEXT DEFAULT 'pending',
  total_amount DECIMAL(10,2) NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

## Form Patterns

### Authentication Forms

```svelte
<!-- auth/login/+page.svelte -->
<script>
	import { superForm } from 'sveltekit-superforms/client';
	import { loginSchema } from './schema.js';
	import {
		Form,
		FormField,
		FormItem,
		FormLabel,
		FormControl,
		FormMessage
	} from '$lib/components/ui/form';
	import { Input } from '$lib/components/ui/input';
	import { Button } from '$lib/components/ui/button';

	const { form, enhance, errors } = superForm(loginSchema);
</script>

<Form method="POST" use:enhance>
	<FormField {errors} field={$form.email}>
		<FormItem>
			<FormLabel>Email</FormLabel>
			<FormControl>
				<Input bind:value={$form.email} type="email" required />
			</FormControl>
			<FormMessage />
		</FormItem>
	</FormField>

	<FormField {errors} field={$form.password}>
		<FormItem>
			<FormLabel>Password</FormLabel>
			<FormControl>
				<Input bind:value={$form.password} type="password" required />
			</FormControl>
			<FormMessage />
		</FormItem>
	</FormField>

	<Button type="submit" class="w-full">Sign In</Button>
</Form>
```

### Blog Post Editor

```svelte
<!-- blog/new/+page.svelte -->
<script>
	import { superForm } from 'sveltekit-superforms/client';
	import { postSchema } from './schema.js';
	import {
		Form,
		FormField,
		FormItem,
		FormLabel,
		FormControl,
		FormMessage
	} from '$lib/components/ui/form';
	import { Input } from '$lib/components/ui/input';
	import { Button } from '$lib/components/ui/button';
	import { Card, CardContent, CardHeader, CardTitle } from '$lib/components/ui/card';

	const { form, enhance, errors } = superForm(postSchema);
</script>

<Card>
	<CardHeader>
		<CardTitle>Create New Post</CardTitle>
	</CardHeader>
	<CardContent>
		<Form method="POST" use:enhance>
			<FormField {errors} field={$form.title}>
				<FormItem>
					<FormLabel>Title</FormLabel>
					<FormControl>
						<Input bind:value={$form.title} placeholder="Enter post title" />
					</FormControl>
					<FormMessage />
				</FormItem>
			</FormField>

			<FormField {errors} field={$form.content}>
				<FormItem>
					<FormLabel>Content</FormLabel>
					<FormControl>
						<textarea
							bind:value={$form.content}
							class="min-h-[200px] w-full rounded-md border border-input bg-background px-3 py-2"
							placeholder="Write your post content..."
						/>
					</FormControl>
					<FormMessage />
				</FormItem>
			</FormField>

			<Button type="submit">Publish Post</Button>
		</Form>
	</CardContent>
</Card>
```

## Internationalization Patterns

### Using Paraglide.js

```svelte
<script>
	import { m } from '@inlang/paraglide-js';
	import { Button } from '$lib/components/ui/button';
</script>

<div class="space-y-4">
	<h1>{m('welcome_title')}</h1>
	<p>{m('welcome_description')}</p>
	<Button>{m('get_started')}</Button>
</div>
```

### Language Files

```json
// messages/en.json
{
	"welcome_title": "Welcome to Feavel Docs",
	"welcome_description": "Create and share your documentation",
	"get_started": "Get Started",
	"auth": {
		"login": "Sign In",
		"signup": "Sign Up",
		"email": "Email",
		"password": "Password"
	}
}
```

## API Route Patterns

### Blog API

```typescript
// src/routes/api/posts/+server.ts
import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';

export const GET: RequestHandler = async ({ locals }) => {
	const { data, error } = await locals.supabase
		.from('posts')
		.select(
			`
      *,
      profiles:author_id (username, full_name, avatar_url)
    `
		)
		.eq('published', true)
		.order('created_at', { ascending: false });

	if (error) {
		return json({ error: error.message }, { status: 500 });
	}

	return json({ posts: data });
};

export const POST: RequestHandler = async ({ request, locals }) => {
	const { session } = await locals.safeGetSession();

	if (!session) {
		return json({ error: 'Unauthorized' }, { status: 401 });
	}

	const body = await request.json();

	const { data, error } = await locals.supabase
		.from('posts')
		.insert({
			...body,
			author_id: session.user.id
		})
		.select()
		.single();

	if (error) {
		return json({ error: error.message }, { status: 500 });
	}

	return json({ post: data });
};
```

## Error Handling Patterns

### Error Pages

```svelte
<!-- src/routes/+error.svelte -->
<script>
	import { page } from '$app/stores';
	import { Button } from '$lib/components/ui/button';
	import { Card, CardContent, CardHeader, CardTitle } from '$lib/components/ui/card';
</script>

<Card class="mx-auto mt-8 max-w-md">
	<CardHeader>
		<CardTitle>Error {$page.status}</CardTitle>
	</CardHeader>
	<CardContent>
		<p class="mb-4 text-muted-foreground">
			{$page.error?.message || 'Something went wrong'}
		</p>
		<Button href="/">Go Home</Button>
	</CardContent>
</Card>
```

### Form Error Handling

```svelte
<script>
	import { superForm } from 'sveltekit-superforms/client';
	import { form } from './schema.js';

	const { form: formData, enhance, errors, message } = superForm(form);
</script>

{#if $message}
	<div class="rounded-md border border-destructive bg-destructive/10 px-4 py-3 text-destructive">
		{$message}
	</div>
{/if}

<form method="POST" use:enhance>
	<!-- form fields -->
</form>
```

## Performance Patterns

### Lazy Loading

```svelte
<script>
	import { onMount } from 'svelte';

	let BlogEditor;

	onMount(async () => {
		const module = await import('$lib/components/modules/blog/BlogEditor.svelte');
		BlogEditor = module.default;
	});
</script>

{#if BlogEditor}
	<svelte:component this={BlogEditor} />
{/if}
```

### Optimistic Updates

```svelte
<script>
	import { superForm } from 'sveltekit-superforms/client';
	import { form } from './schema.js';

	const {
		form: formData,
		enhance,
		errors
	} = superForm(form, {
		optimistic: true
	});
</script>
```

## Testing Patterns

### Component Testing

```typescript
// src/routes/+page.svelte.test.ts
import { render, screen } from '@testing-library/svelte';
import Page from './+page.svelte';

describe('Home Page', () => {
	it('renders welcome message', () => {
		render(Page);
		expect(screen.getByText(/welcome/i)).toBeInTheDocument();
	});
});
```

### E2E Testing

```typescript
// e2e/auth.test.ts
import { test, expect } from '@playwright/test';

test('user can sign in', async ({ page }) => {
	await page.goto('/auth/login');
	await page.fill('[name="email"]', 'test@example.com');
	await page.fill('[name="password"]', 'password123');
	await page.click('button[type="submit"]');

	await expect(page).toHaveURL('/member/dashboard');
});
```

## Security Patterns

### Input Validation

```typescript
// src/routes/auth/login/schema.ts
import { z } from 'zod';

export const loginSchema = z.object({
	email: z.string().email('Invalid email address'),
	password: z.string().min(8, 'Password must be at least 8 characters')
});
```

### CSRF Protection

```typescript
// src/hooks.server.ts
export const handle: Handle = async ({ event, resolve }) => {
	// CSRF protection is handled by SvelteKit automatically
	return resolve(event);
};
```

## Deployment Patterns

### Environment Variables

```bash
# .env.local
PUBLIC_SUPABASE_URL=your_supabase_url
PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
```

### Build Configuration

```javascript
// svelte.config.js
import adapter from '@sveltejs/adapter-auto';

export default {
	kit: {
		adapter: adapter(),
		prerender: {
			handleHttpError: ({ path, referrer, message }) => {
				// Ignore missing files
				if (path.startsWith('/api/')) {
					return;
				}

				// Throw error for other missing files
				throw new Error(message);
			}
		}
	}
};
```

## Best Practices

1. **Security First**: Always validate user input and implement proper authentication
2. **Performance**: Use SSR/SSG where appropriate and implement lazy loading
3. **Accessibility**: Follow WCAG guidelines and test with screen readers
4. **Internationalization**: Use Paraglide.js for all user-facing strings
5. **Type Safety**: Use TypeScript interfaces and Zod schemas for validation
6. **Testing**: Write unit and E2E tests for critical user flows
7. **Documentation**: Keep code well-documented and maintainable
   description:
   globs:
   alwaysApply: false

---
